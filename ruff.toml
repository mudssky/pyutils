# Ruff配置文件
# 详细配置说明：https://docs.astral.sh/ruff/

# 行长度限制（与项目规范一致）
line-length = 88

# 目标Python版本
target-version = "py310"

# 排除目录
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    ".uv",
    "build",
    "dist",
    "docs/_build",
    "htmlcov",
    ".tox",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache",
]

# 每个文件的最大修复数
fix = true
show-fixes = true

[lint]
# 启用更多规则集
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "RUF", # ruff-specific rules
    "N",   # pep8-naming
    "D",   # pydocstyle
    "S",   # flake8-bandit (security)
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
]

# 忽略特定规则
ignore = [


    "S101",  # Use of assert detected (pytest uses assert)
    "PT011", # pytest-raises-too-broad (测试中可以使用宽泛的异常捕获)
    "S311",  # suspicious-non-cryptographic-random-usage (工具函数中可以使用)
    "S324",  # hashlib-insecure-hash-function (工具函数中可以使用MD5等)
    # 下面是 与 Mypy 重叠的规则，禁用 flake8-type-checking (TCH) 规则集
    "D100",  # Missing docstring in public module
    "D101",
    "D102",
    "D103",
    "D104",  # Missing docstring in public package
    "D105",
    "D106",
    "D107",  # 忽略 pydocstyle 的缺失文档字符串规则
    # TC001, TC002, TC003 规则已被移除或重命名
]

[lint.pydocstyle]
# 使用Google风格的docstring
convention = "google"

[lint.isort]
# 导入排序配置
known-first-party = ["pyutils"]
force-single-line = false
lines-after-imports = 2
split-on-trailing-comma = true

[lint.flake8-pytest-style]
# pytest风格配置
fixture-parentheses = false
parametrize-names-type = "tuple"
parametrize-values-type = "tuple"
parametrize-values-row-type = "tuple"

[lint.per-file-ignores]
# 测试文件特殊规则
"tests/**/*.py" = [
    "D",    # 测试文件不需要docstring
    "S101", # 测试中允许assert
    "T20",  # 测试中允许print
]
# 示例文件特殊规则
"examples.py" = [
    "T20", # 示例中允许print
    "D",   # 示例不需要完整docstring
]
"benchmark.py" = [
    "T20", # 基准测试中允许print
]
