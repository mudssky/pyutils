name: Auto Release

# 触发条件：推送tag时自动发布
on:
  push:
    tags:
      - 'v*.*.*'  # 匹配 v1.0.0, v2.1.3 等格式的tag
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'

jobs:
  # 生成changelog
  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
      version: ${{ steps.version.outputs.version }}
      previous_tag: ${{ steps.previous_tag.outputs.tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史记录

    - name: Get version from tag
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG="${{ github.event.inputs.tag }}"
        else
          TAG="${{ github.ref_name }}"
        fi
        VERSION=${TAG#v}  # 移除v前缀
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Get previous tag
      id: previous_tag
      run: |
        # 获取上一个tag
        CURRENT_TAG="${{ steps.version.outputs.tag }}"
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -A1 "^$CURRENT_TAG$" | tail -n1)
        if [ "$PREVIOUS_TAG" = "$CURRENT_TAG" ]; then
          # 如果是第一个tag，使用第一个commit
          PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        echo "tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
        echo "Previous tag: $PREVIOUS_TAG"

    - name: Generate changelog from commits
      id: changelog
      run: |
        CURRENT_TAG="${{ steps.version.outputs.tag }}"
        PREVIOUS_TAG="${{ steps.previous_tag.outputs.tag }}"
        
        echo "Generating changelog from $PREVIOUS_TAG to $CURRENT_TAG"
        
        # 生成changelog
        CHANGELOG="## 🚀 Release ${{ steps.version.outputs.version }}\n\n"
        
        # 获取commit信息并分类
        FEATURES=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..$CURRENT_TAG --grep="^feat" --grep="^feature" | head -20)
        FIXES=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..$CURRENT_TAG --grep="^fix" --grep="^bugfix" | head -20)
        DOCS=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..$CURRENT_TAG --grep="^docs" | head -10)
        CHORES=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..$CURRENT_TAG --grep="^chore" --grep="^ci" --grep="^build" | head -10)
        OTHERS=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..$CURRENT_TAG --invert-grep --grep="^feat" --grep="^feature" --grep="^fix" --grep="^bugfix" --grep="^docs" --grep="^chore" --grep="^ci" --grep="^build" | head -10)
        
        # 添加新功能
        if [ -n "$FEATURES" ]; then
          CHANGELOG="${CHANGELOG}### ✨ New Features\n$FEATURES\n\n"
        fi
        
        # 添加bug修复
        if [ -n "$FIXES" ]; then
          CHANGELOG="${CHANGELOG}### 🐛 Bug Fixes\n$FIXES\n\n"
        fi
        
        # 添加文档更新
        if [ -n "$DOCS" ]; then
          CHANGELOG="${CHANGELOG}### 📚 Documentation\n$DOCS\n\n"
        fi
        
        # 添加其他更改
        if [ -n "$CHORES" ]; then
          CHANGELOG="${CHANGELOG}### 🔧 Maintenance\n$CHORES\n\n"
        fi
        
        # 添加其他提交
        if [ -n "$OTHERS" ]; then
          CHANGELOG="${CHANGELOG}### 📦 Other Changes\n$OTHERS\n\n"
        fi
        
        # 添加贡献者信息
        CONTRIBUTORS=$(git log --pretty=format:"%an" $PREVIOUS_TAG..$CURRENT_TAG | sort | uniq | tr '\n' ', ' | sed 's/, $//')
        if [ -n "$CONTRIBUTORS" ]; then
          CHANGELOG="${CHANGELOG}### 👥 Contributors\nThanks to: $CONTRIBUTORS\n\n"
        fi
        
        # 添加安装信息
        CHANGELOG="${CHANGELOG}### 📦 Installation\n\`\`\`bash\npip install mudssky-pyutils==${{ steps.version.outputs.version }}\n\`\`\`\n\n"
        
        # 添加完整更改日志链接
        CHANGELOG="${CHANGELOG}**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$CURRENT_TAG"
        
        # 保存到文件和输出
        echo -e "$CHANGELOG" > changelog.md
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "Generated changelog:"
        cat changelog.md

    - name: Upload changelog
      uses: actions/upload-artifact@v4
      with:
        name: changelog
        path: changelog.md
        retention-days: 30

  # 运行测试确保质量
  test:
    name: Test Before Release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: uv sync --dev

    - name: Run tests
      run: uv run pytest tests/ -v

    - name: Run linting
      run: |
        uv run ruff check src/ tests/
        uv run mypy src/

  # 创建GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [generate-changelog, test]
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download changelog
      uses: actions/download-artifact@v4
      with:
        name: changelog

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.generate-changelog.outputs.version && format('v{0}', needs.generate-changelog.outputs.version) || github.ref_name }}
        release_name: Release ${{ needs.generate-changelog.outputs.version || github.ref_name }}
        body_path: changelog.md
        draft: false
        prerelease: ${{ github.event.inputs.prerelease == 'true' }}

  # 构建和发布到PyPI
  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [generate-changelog, test, create-release]
    environment:
      name: pypi
      url: https://pypi.org/p/mudssky-pyutils
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: uv sync --dev

    - name: Update version in files
      run: |
        VERSION="${{ needs.generate-changelog.outputs.version }}"
        echo "Updating version to: $VERSION"
        
        # 更新 pyproject.toml
        sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml
        
        # 更新 __init__.py
        sed -i "s/__version__ = \".*\"/__version__ = \"$VERSION\"/" src/pyutils/__init__.py
        
        # 验证更改
        echo "Updated pyproject.toml:"
        grep 'version =' pyproject.toml
        echo "Updated __init__.py:"
        grep '__version__' src/pyutils/__init__.py

    - name: Build package
      run: |
        echo "Building package..."
        uv build
        
        echo "Built packages:"
        ls -la dist/

    - name: Verify package
      run: |
        echo "Verifying package integrity..."
        uv run twine check dist/*

    - name: Upload build artifacts to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: dist/
        asset_name: dist-${{ needs.generate-changelog.outputs.version }}.zip
        asset_content_type: application/zip

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/
        verbose: true

    - name: Verify publication
      run: |
        VERSION="${{ needs.generate-changelog.outputs.version }}"
        echo "🎉 Package published successfully!"
        echo "Version: $VERSION"
        echo "PyPI URL: https://pypi.org/project/mudssky-pyutils/$VERSION/"
        echo "Install: pip install mudssky-pyutils==$VERSION"

  # 通知
  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [generate-changelog, test, create-release, publish]
    if: always()
    steps:
    - name: Create notification summary
      run: |
        echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version**: ${{ needs.generate-changelog.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Tag**: ${{ needs.generate-changelog.outputs.version && format('v{0}', needs.generate-changelog.outputs.version) || github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.test.result }}" = "success" ]; then
          echo "✅ **Tests**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Tests**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.create-release.result }}" = "success" ]; then
          echo "✅ **GitHub Release**: Created" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **GitHub Release**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.publish.result }}" = "success" ]; then
          echo "✅ **PyPI Publication**: Success" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **PyPI Publication**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Release URL**: https://github.com/${{ github.repository }}/releases/tag/${{ needs.generate-changelog.outputs.version && format('v{0}', needs.generate-changelog.outputs.version) || github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**PyPI URL**: https://pypi.org/project/mudssky-pyutils/${{ needs.generate-changelog.outputs.version }}/" >> $GITHUB_STEP_SUMMARY