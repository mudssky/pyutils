name: Pre-release to TestPyPI

on:
  push:
    tags:
      - 'v*-alpha*'
      - 'v*-beta*'
      - 'v*-rc*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to publish (e.g., v1.0.0-beta.1)'
        required: true
        type: string

jobs:
  validate:
    name: Validate Pre-release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
      is_prerelease: ${{ steps.extract.outputs.is_prerelease }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version info
      id: extract
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG="${{ github.event.inputs.tag }}"
        else
          TAG="${{ github.ref_name }}"
        fi

        echo "Processing tag: $TAG"

        # Remove 'v' prefix and extract version
        VERSION=${TAG#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

        # Check if it's a pre-release
        if [[ $VERSION =~ (alpha|beta|rc) ]]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
          echo "✓ Detected pre-release version: $VERSION"
        else
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
          echo "✗ Not a pre-release version: $VERSION"
          exit 1
        fi

    - name: Validate version format
      run: |
        VERSION="${{ steps.extract.outputs.version }}"

        # Validate semantic version with pre-release
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+-(alpha|beta|rc)\.[0-9]+$ ]]; then
          echo "✗ Invalid pre-release version format: $VERSION"
          echo "Expected format: X.Y.Z-{alpha|beta|rc}.N (e.g., 1.0.0-beta.1)"
          exit 1
        fi

        echo "✓ Valid pre-release version format: $VERSION"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        python-version: ['3.9', '3.11', '3.12']
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --dev

    - name: Run tests
      run: |
        uv run pytest tests/ -v --tb=short

    - name: Run code quality checks
      if: matrix.python-version == '3.11'
      run: |
        uv run ruff check src/ tests/
        uv run ruff format --check src/ tests/
        uv run mypy src/

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [validate, test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Set up Python
      run: uv python install 3.11

    - name: Install dependencies
      run: uv sync --dev

    - name: Update version in files
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        echo "Updating version to: $VERSION"

        # Update pyproject.toml
        sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml

        # Update __init__.py
        sed -i "s/__version__ = \".*\"/__version__ = \"$VERSION\"/" src/pyutils/__init__.py

        # Verify changes
        echo "Updated pyproject.toml:"
        grep 'version =' pyproject.toml
        echo "Updated __init__.py:"
        grep '__version__' src/pyutils/__init__.py

    - name: Build package
      run: |
        uv build

    - name: Verify package
      run: |
        uv run twine check dist/*

        # List built packages
        echo "Built packages:"
        ls -la dist/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ needs.validate.outputs.version }}
        path: dist/
        retention-days: 7

  publish-testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: [validate, build]
    environment:
      name: testpypi
      url: https://test.pypi.org/project/mudssky-pyutils/${{ needs.validate.outputs.version }}/
    permissions:
      id-token: write
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-${{ needs.validate.outputs.version }}
        path: dist/

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        packages-dir: dist/
        verbose: true

    - name: Verify TestPyPI publication
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        echo "Package published to TestPyPI!"
        echo "Version: $VERSION"
        echo "TestPyPI URL: https://test.pypi.org/project/mudssky-pyutils/$VERSION/"
        echo "Install command: pip install -i https://test.pypi.org/simple/ mudssky-pyutils==$VERSION"

  test-installation:
    name: Test Installation from TestPyPI
    runs-on: ubuntu-latest
    needs: [validate, publish-testpypi]
    strategy:
      matrix:
        python-version: ['3.9', '3.11']
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Wait for TestPyPI propagation
      run: sleep 60

    - name: Install from TestPyPI
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        echo "Installing mudssky-pyutils==$VERSION from TestPyPI"

        # Install with retries
        for i in {1..3}; do
          if pip install -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ "mudssky-pyutils==$VERSION"; then
            echo "✓ Installation successful on attempt $i"
            break
          else
            echo "✗ Installation failed on attempt $i"
            if [ $i -eq 3 ]; then
              echo "Installation failed after 3 attempts"
              exit 1
            fi
            sleep 30
          fi
        done

    - name: Test basic functionality
      run: |
        python -c "
        import pyutils
        print(f'Installed version: {pyutils.__version__}')

        # Test basic imports
        from pyutils import string, array, math
        print('✓ Basic imports successful')

        # Test a simple function
        from pyutils.string import is_empty
        assert is_empty('') == True
        assert is_empty('test') == False
        print('✓ Basic functionality test passed')

        print('🎉 Pre-release package works correctly!')
        "

  create-prerelease:
    name: Create GitHub Pre-release
    runs-on: ubuntu-latest
    needs: [validate, test-installation]
    if: github.event_name == 'push'
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        TAG="v$VERSION"

        # Get previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 $TAG^ 2>/dev/null || echo "")

        if [ -n "$PREV_TAG" ]; then
          echo "Generating changelog from $PREV_TAG to $TAG"
          CHANGELOG=$(git log --pretty=format:"- %s" $PREV_TAG..$TAG --no-merges)
        else
          echo "No previous tag found, using last 10 commits"
          CHANGELOG=$(git log --pretty=format:"- %s" -10 --no-merges)
        fi

        # Create changelog content
        cat > CHANGELOG_TEMP.md << EOF
        ## 🚀 Pre-release v$VERSION

        This is a pre-release version for testing purposes.

        ### Changes
        $CHANGELOG

        ### Testing
        - ✅ Published to TestPyPI
        - ✅ Installation tested on multiple Python versions
        - ✅ Basic functionality verified

        ### Installation
        \`\`\`bash
        pip install -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ mudssky-pyutils==$VERSION
        \`\`\`

        **Note**: This is a pre-release version. Use with caution in production environments.
        EOF

        echo "content<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG_TEMP.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Pre-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.validate.outputs.version }}
        release_name: Pre-release v${{ needs.validate.outputs.version }}
        body: ${{ steps.changelog.outputs.content }}
        draft: false
        prerelease: true

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [validate, publish-testpypi, test-installation]
    if: always()
    steps:
    - name: Summary
      run: |
        echo "## 🚀 Pre-release Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **TestPyPI**: https://test.pypi.org/project/mudssky-pyutils/${{ needs.validate.outputs.version }}/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.publish-testpypi.result }}" = "success" ]; then
          echo "✅ **TestPyPI Publication**: Success" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **TestPyPI Publication**: Failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.test-installation.result }}" = "success" ]; then
          echo "✅ **Installation Test**: Success" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Installation Test**: Failed" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Installation Command" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "pip install -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ mudssky-pyutils==${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
