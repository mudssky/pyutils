name: Version Bump

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      create_release:
        description: 'Create GitHub Release after version bump'
        required: false
        default: true
        type: boolean

jobs:
  bump-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
        
    - name: Set up Python
      run: uv python install 3.11
      
    - name: Install dependencies
      run: uv sync --dev
      
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"
        
    - name: Calculate new version
      id: new_version
      run: |
        CURRENT="${{ steps.current_version.outputs.current }}"
        TYPE="${{ github.event.inputs.version_type }}"
        
        # Parse version components
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        # Bump version based on type
        case $TYPE in
          "major")
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          "minor")
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          "patch")
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"
        
    - name: Update pyproject.toml
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new }}"
        sed -i "s/version = \".*\"/version = \"$NEW_VERSION\"/" pyproject.toml
        
    - name: Update __init__.py
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new }}"
        sed -i "s/__version__ = \".*\"/__version__ = \"$NEW_VERSION\"/" src/pyutils/__init__.py
        
    - name: Run tests to verify changes
      run: |
        uv run pytest tests/ -v --tb=short
        
    - name: Commit version bump
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new }}"
        git add pyproject.toml src/pyutils/__init__.py
        git commit -m "chore: bump version to $NEW_VERSION"
        
    - name: Create and push tag
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new }}"
        git tag "v$NEW_VERSION"
        git push origin main
        git push origin "v$NEW_VERSION"
        
    - name: Generate changelog
      id: changelog
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new }}"
        CURRENT_VERSION="${{ steps.current_version.outputs.current }}"
        
        # Get commits since last version
        CHANGELOG=$(git log --pretty=format:"- %s" v$CURRENT_VERSION..HEAD --no-merges | head -20)
        
        # Create changelog content
        cat > CHANGELOG_TEMP.md << EOF
        ## What's Changed
        
        $CHANGELOG
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/v$CURRENT_VERSION...v$NEW_VERSION
        EOF
        
        echo "content<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG_TEMP.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create GitHub Release
      if: github.event.inputs.create_release == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.new_version.outputs.new }}
        release_name: Release v${{ steps.new_version.outputs.new }}
        body: ${{ steps.changelog.outputs.content }}
        draft: false
        prerelease: false
        
    - name: Summary
      run: |
        echo "## Version Bump Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Previous Version**: ${{ steps.current_version.outputs.current }}" >> $GITHUB_STEP_SUMMARY
        echo "- **New Version**: ${{ steps.new_version.outputs.new }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Bump Type**: ${{ github.event.inputs.version_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag Created**: v${{ steps.new_version.outputs.new }}" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.event.inputs.create_release }}" = "true" ]; then
          echo "- **GitHub Release**: Created" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **GitHub Release**: Skipped" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The new version has been committed and tagged. If auto-release is enabled, the package will be published to PyPI automatically." >> $GITHUB_STEP_SUMMARY